// Assets/Shaders/PointCloudFrustum.compute
#pragma kernel CSMain

StructuredBuffer<float3> PositionBuffer;
RWStructuredBuffer<uint> VisibleBuffer;
uint                      Count;         // total number of points
float4x4                  CameraVP;      // camera view-proj matrix
float4x4                  LocalToWorld;  // each buildingâ€™s transform

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= Count) return;  // guard against extra threads

    // Transform the local position into world space
    float4 worldPos = mul(LocalToWorld, float4(PositionBuffer[i], 1));

    // Project into clip space, then to NDC
    float4 clip = mul(CameraVP, worldPos);
    float3 ndc  = clip.xyz / clip.w;

    // Frustum test in NDC: x,y within [-1,1], z within [0,1]
    bool inside = 
        ndc.x >= -1 && ndc.x <= 1 &&
        ndc.y >= -1 && ndc.y <= 1 &&
        ndc.z >=  0 && ndc.z <= 1;

    VisibleBuffer[i] = inside ? 1 : 0;
}
